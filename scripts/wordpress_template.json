{
	"AWSTemplateFormatVersion": "2010-09-09",

	"Description": "AWS CloudFormation Sample Template WordPress_Multi_AZ: WordPress is web software you can use to create a beautiful website or blog. This template installs a highly-available, scalable WordPress deployment using a multi-az Amazon RDS database instance for storage. It demonstrates using the AWS CloudFormation bootstrap scripts to deploy WordPress. **WARNING** This template creates an Amazon EC2 instance, an Application Load Balancer and an Amazon RDS database instance. You will be billed for the AWS resources used if you create a stack from this template.",

	"Parameters": {
		"VpcId": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "VpcId of your existing Virtual Private Cloud (VPC)",
			"ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
		},

		"Subnets": {
			"Type": "List<AWS::EC2::Subnet::Id>",
			"Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
			"ConstraintDescription": "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
		},

		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},

		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.small",
			"AllowedValues": ["t2.small", "t2.medium", "t2.large"],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},

		"SSHLocation": {
			"Description": "The IP address range that can be used to SSH to the EC2 instances",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},

		"DBClass": {
			"Description": "Database instance class",
			"Type": "String",
			"Default": "db.t2.small",
			"AllowedValues": ["db.t2.small", "db.t2.medium", "db.t2.large"],
			"ConstraintDescription": "must select a valid database instance type."
		},

		"DBName": {
			"Default": "wordpressdb",
			"Description": "The WordPress database name",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "64",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},

		"DBUser": {
			"NoEcho": "true",
			"Description": "The WordPress database admin account username",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "16",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},

		"DBPassword": {
			"NoEcho": "true",
			"Description": "The WordPress database admin account password",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*",
			"ConstraintDescription": "must contain only alphanumeric characters."
		},

		"DBAllocatedStorage": {
			"Default": "5",
			"Description": "The size of the database (Gb)",
			"Type": "Number",
			"MinValue": "5",
			"MaxValue": "1024",
			"ConstraintDescription": "must be between 5 and 1024Gb."
		}
	},

	"Mappings": {
		"AWSInstanceType2Arch": {
			"t2.small": {
				"Arch": "HVM64"
			},
			"t2.medium": {
				"Arch": "HVM64"
			},
			"t2.large": {
				"Arch": "HVM64"
			}
		},

		"AWSInstanceType2NATArch": {

			"t2.small": {
				"Arch": "NATHVM64"
			},
			"t2.medium": {
				"Arch": "NATHVM64"
			},
			"t2.large": {
				"Arch": "NATHVM64"
			}

		},
		"AWSRegionArch2AMI": {
			"us-east-1": {
				"HVM64": "ami-0ff8a91507f77f867",
				"HVMG2": "ami-0a584ac55a7631c0c"
			},
			"us-west-2": {
				"HVM64": "ami-a0cfeed8",
				"HVMG2": "ami-0e09505bc235aa82d"
			},
			"us-west-1": {
				"HVM64": "ami-0bdb828fd58c52235",
				"HVMG2": "ami-066ee5fd4a9ef77f1"
			},
			"eu-west-1": {
				"HVM64": "ami-047bb4163c506cd98",
				"HVMG2": "ami-0a7c483d527806435"
			},
			"eu-west-2": {
				"HVM64": "ami-f976839e",
				"HVMG2": "NOT_SUPPORTED"
			},
			"eu-west-3": {
				"HVM64": "ami-0ebc281c20e89ba4b",
				"HVMG2": "NOT_SUPPORTED"
			},
			"eu-central-1": {
				"HVM64": "ami-0233214e13e500f77",
				"HVMG2": "ami-06223d46a6d0661c7"
			},
			"ap-northeast-1": {
				"HVM64": "ami-06cd52961ce9f0d85",
				"HVMG2": "ami-053cdd503598e4a9d"
			},
			"ap-northeast-2": {
				"HVM64": "ami-0a10b2721688ce9d2",
				"HVMG2": "NOT_SUPPORTED"
			},
			"ap-northeast-3": {
				"HVM64": "ami-0d98120a9fb693f07",
				"HVMG2": "NOT_SUPPORTED"
			},
			"ap-southeast-1": {
				"HVM64": "ami-08569b978cc4dfa10",
				"HVMG2": "ami-0be9df32ae9f92309"
			},
			"ap-southeast-2": {
				"HVM64": "ami-09b42976632b27e9b",
				"HVMG2": "ami-0a9ce9fecc3d1daf8"
			},
			"ap-south-1": {
				"HVM64": "ami-0912f71e06545ad88",
				"HVMG2": "ami-097b15e89dbdcfcf4"
			},
			"us-east-2": {
				"HVM64": "ami-0b59bfac6be064b78",
				"HVMG2": "NOT_SUPPORTED"
			},
			"ca-central-1": {
				"HVM64": "ami-0b18956f",
				"HVMG2": "NOT_SUPPORTED"
			},
			"sa-east-1": {
				"HVM64": "ami-07b14488da8ea02a0",
				"HVMG2": "NOT_SUPPORTED"
			},
			"cn-north-1": {
				"HVM64": "ami-0a4eaf6c4454eda75",
				"HVMG2": "NOT_SUPPORTED"
			},
			"cn-northwest-1": {
				"HVM64": "ami-6b6a7d09",
				"HVMG2": "NOT_SUPPORTED"
			}
		}

	},

	"Resources": {

		"ApplicationLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Subnets": {
					"Ref": "Subnets"
				},
				"SecurityGroups": [{
					"Ref": "ALBSecurityGroup"
				}]
			}
		},

		"ALBListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": {
						"Ref": "ALBTargetGroup"
					}
				}],
				"LoadBalancerArn": {
					"Ref": "ApplicationLoadBalancer"
				},
				"Port": "80",
				"Protocol": "HTTP"
			}
		},

		"ALBTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckPath": "/wordpress/",
				"HealthCheckIntervalSeconds": 10,
				"HealthCheckTimeoutSeconds": 5,
				"HealthyThresholdCount": 2,
				"Port": 80,
				"Protocol": "HTTP",
				"UnhealthyThresholdCount": 5,
				"VpcId": {
					"Ref": "VpcId"
				},
				"TargetGroupAttributes": [{
						"Key": "stickiness.enabled",
						"Value": "true"
					},
					{
						"Key": "stickiness.type",
						"Value": "lb_cookie"
					},
					{
						"Key": "stickiness.lb_cookie.duration_seconds",
						"Value": "30"
					}
				]
			}
		},
		"ALBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access via port 80",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}
				],
				"VpcId": {
					"Ref": "VpcId"
				}
			}
		},

		"WebServerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"SourceSecurityGroupId": {
							"Fn::Select": [0, {
								"Fn::GetAtt": ["ApplicationLoadBalancer", "SecurityGroups"]
							}]
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": {
							"Ref": "SSHLocation"
						}
					}
				],
				"VpcId": {
					"Ref": "VpcId"
				}
			}
		},
		"IAMEC2InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "EC2IAMRole"
				}]
			}
		},
		"EC2IAMRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Policies": [{
					"PolicyName": "root",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": "*",
							"Resource": "*"
						}]
					}
				}],
				"Path": "/"
			}
		},
		"WebServerGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"VPCZoneIdentifier": {
					"Ref": "Subnets"
				},
				"LaunchConfigurationName": {
					"Ref": "LaunchConfig"
				},
				"MinSize": "1",
				"MaxSize": "1",
				"DesiredCapacity": "1",
				"TargetGroupARNs": [{
					"Ref": "ALBTargetGroup"
				}]
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT20M"
				}
			},
			"UpdatePolicy": {
				"AutoScalingRollingUpdate": {
					"MinInstancesInService": "1",
					"MaxBatchSize": "1",
					"PauseTime": "PT20M",
					"WaitOnResourceSignals": "true"
				}
			}
		},

		"LaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"wordpress_install": ["install_cfn", "install_wordpress"]
					},
					"install_cfn": {
						"files": {
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": ["", [
										"[main]\n",
										"stack=", {
											"Ref": "AWS::StackId"
										}, "\n",
										"region=", {
											"Ref": "AWS::Region"
										}, "\n"
									]]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": ["", [
										"[cfn-auto-reloader-hook]\n",
										"triggers=post.update\n",
										"path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
										"action=/opt/aws/bin/cfn-init -v ",
										"         --stack ", {
											"Ref": "AWS::StackName"
										},
										"         --resource LaunchConfig ",
										"         --configsets wordpress_install ",
										"         --region ", {
											"Ref": "AWS::Region"
										}, "\n"
									]]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							}
						},
						"services": {
							"sysvinit": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
								}
							}
						}
					},

					"install_wordpress": {
						"packages": {
							"yum": {
								"php": [],
								"php-mysql": [],
								"mysql": [],
								"httpd": []
							}
						},
						"sources": {
							"/var/www/html": "http://wordpress.org/latest.tar.gz"
						},
						"files": {
							"/tmp/create-wp-config": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash\n",
										"cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php\n",
										"sed -i \"s/'database_name_here'/'", {
											"Ref": "DBName"
										}, "'/g\" wp-config.php\n",
										"sed -i \"s/'username_here'/'", {
											"Ref": "DBUser"
										}, "'/g\" wp-config.php\n",
										"sed -i \"s/'password_here'/'", {
											"Ref": "DBPassword"
										}, "'/g\" wp-config.php\n",
										"sed -i \"s/'localhost'/'", {
											"Fn::GetAtt": ["DBInstance", "Endpoint.Address"]
										}, "'/g\" wp-config.php\n"
									]]
								},
								"mode": "000500",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"01_configure_wordpress": {
								"command": "/tmp/create-wp-config",
								"cwd": "/var/www/html/wordpress"
							},
							"02_workshop_configs1": {
								"command": "sudo sed -i 's/LogFormat \"%h/LogFormat \"%{X-Forwarded-For}i/g' /etc/httpd/conf/httpd.conf"
							},
							"03_workshop_configs2": {
								"command": "sudo chmod -R 777 /var/log/httpd/"
							}
						},
						"services": {
							"sysvinit": {
								"httpd": {
									"enabled": "true",
									"ensureRunning": "true"
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["AWSRegionArch2AMI", {
							"Ref": "AWS::Region"
						},
						{
							"Fn::FindInMap": ["AWSInstanceType2Arch", {
								"Ref": "InstanceType"
							}, "Arch"]
						}
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"InstanceMonitoring": "true",
				"IamInstanceProfile": {
					"Ref": "IAMEC2InstanceProfile"
				},
				"SecurityGroups": [{
					"Ref": "WebServerSecurityGroup"
				}],
				"KeyName": {
					"Ref": "KeyName"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash -xe\n",
							"yum update -y aws-cfn-bootstrap\n",

							"sudo yum install https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm -y\n",

							"sleep 2\n",

							"sudo yum install python36 -y\n",

							"sleep 2\n",

							"sudo /usr/bin/pip-3.6 install boto3\n",
							
							"sudo yum install https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm -y\n",

							"sleep 2\n",

							"mkdir /home/ec2-user/module1\n",

							"mkdir /home/ec2-user/module2\n",

							"mkdir /home/ec2-user/module3\n",

							"wget https://s3.amazonaws.com/injae-public-download/clickstream.py -P /home/ec2-user/module2/\n",

							"wget https://s3.amazonaws.com/injae-public-download/produce.sh -P /home/ec2-user/module2/\n",

							"wget https://s3.amazonaws.com/injae-public-download/amazonconnect.py -P /home/ec2-user/module3/\n",

							"wget https://s3.amazonaws.com/injae-public-download/produce_connect.sh -P /home/ec2-user/module3/\n",

							"/opt/aws/bin/cfn-init -v ",
							"         --stack ", {
								"Ref": "AWS::StackName"
							},
							"         --resource LaunchConfig ",
							"         --configsets wordpress_install ",
							"         --region ", {
								"Ref": "AWS::Region"
							}, "\n",

							"/opt/aws/bin/cfn-signal -e $? ",
							"         --stack ", {
								"Ref": "AWS::StackName"
							},
							"         --resource WebServerGroup ",
							"         --region ", {
								"Ref": "AWS::Region"
							}, "\n"


						]]
					}
				}

			}
		},

		"DBEC2SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Open database for access",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "3306",
					"ToPort": "3306",
					"SourceSecurityGroupId": {
						"Ref": "WebServerSecurityGroup"
					}
				}],
				"VpcId": {
					"Ref": "VpcId"
				}
			}
		},
		"RdsMonitoringRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Sid": "",
						"Effect": "Allow",
						"Principal": {
							"Service": "monitoring.rds.amazonaws.com"
						},
						"Action": "sts:AssumeRole"
					}]
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"
				],
				"Path": "/"
			}
		},

		"DBInstance": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"DBName": {
					"Ref": "DBName"
				},
				"Engine": "MySQL",
				"MasterUsername": {
					"Ref": "DBUser"
				},
				"MasterUserPassword": {
					"Ref": "DBPassword"
				},
				"DBInstanceClass": {
					"Ref": "DBClass"
				},
				"AllocatedStorage": {
					"Ref": "DBAllocatedStorage"
				},
				"VPCSecurityGroups": [{
					"Fn::GetAtt": ["DBEC2SecurityGroup", "GroupId"]
				}],
				"MonitoringInterval": "1",
				"MonitoringRoleArn": {
					"Fn::GetAtt": [
						"RdsMonitoringRole",
						"Arn"
					]
				}
			}
		}
	},

	"Outputs": {
		"WebsiteURL": {
			"Value": {
				"Fn::Join": ["", ["http://", {
					"Fn::GetAtt": ["ApplicationLoadBalancer", "DNSName"]
				}, "/wordpress"]]
			},
			"Description": "WordPress Website"
		}
	}
}